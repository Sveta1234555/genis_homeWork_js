Урок8 DOM 


JavaScript 


NEXT

План 


DOM 
НавігаціяпоDOM 
Властивості 

РоботазDOM-вузлами 




DOM-об'єктнамодельдокумента(DocumentObjectModel). 

DOMцезовсіміншепредставленнявеб-сторінкиніжHTMLкод. 

БраузерповказанійURLадресівідправляєзапитіотримує(завантажує)з 
серверавеб-сторінкуувиглядіHTMLкоду,якийчастоназиваєтьсявихіднийкод 
сторінки.Іякщоукодівказанііншіфайлитакіякстиліcss,js-тозавантажуєіїх. 

ІужеззавантаженогозсервераHTMLкодубраузерформує-DOM. 

БраузерстворюєDOMдлятогощобзадопомогоюJavaScriptможнабулошвидко 
маніпулювативеб-документом:шукатипотрібнийелемент,додаватинові 
елементи,отриматинаступнийдочірнийелементіт.п.. 



DOM(DocumentObjectModel,Об'єктнамодельдокумента)–міжплатформний, 
незалежнийвідмовиінтерфейсдляроботизHTML-документом.Міститьнабір 
властивостейтаметодів,якідозволяютьшукати,створюватитавидаляти 
елементи,реагуватинадіїкористувачатаінше. 

BOM(BrowserObjectModel,Об'єктнамодельбраузера)–міжплатформний, 
незалежнийвідмовиінтерфейсдляроботизвікномбраузера.Міститьнабір 
властивостейтаметодів,щодозволяютьотриматидоступбезпосередньодо 
поточноївкладкитарядуфункційбраузера.Включаєоб'єктроботизісторією, 
місцемрозташуваннятаінше.

DOMмаєдеревоподібнуієархію.ДокументDOMскладаєтьсязвузлівNode. 
Коженвузолможеміститиусобівбудованийвузол,елемент,текстчикоментар.

КоженвузолDOMформуєтьсязHTMLтегуіотримуєвластивості,події,стиліякі 
вказаніусамихатрибутахтегу,CSSстиляхівJavaScriptкоді.

DOMпідтримуєоб'єктноорієнтованепредставленнявеб-сторінкиідозволяє 
змінюватидокументвеб-сторінкизадопомогоюJavaScript. 



Інші типи вузлів 
Окрімелементівтатекстовихвузлівєдеякііншітипивузлів. 


Наприклад,коментарі: 


<!DOCTYPEHTML> 
<html> 
<body> 


Правдапрооленів.

<ol> 
<li>Олень--церозумний</li> 
<!--comment--> 
<li>...тахитрийзвір!</li> 


</ol> 
</body> 
</html> 




Тутмибачимоновийтипвузладерева–вузол-коментар,позначенийяк#comment, 
міждвоматекстовимивузлами. 

Мимоглиподумати–чомукоментардодаєтьсядоDOM?Ценевпливаєнавізуальне 
уявлення.Алеєправило–якщощосьєвHTML,товонотакожповиннобутивDOM 
дереві. 

ВсевHTML,навітькоментарі,стаєчастиноюDOM. 

Навітьдиректива<!DOCTYPE...>насамомупочаткуHTMLтакожєвузломDOM.Вонає 
DOMдеревіпрямоперед<html>.Малохтознаєпроце.Минезбираємосязвертатися 
доцьоговузла,минавітьнемалюємойогонадіаграмах,алевінтамє. 

Об’єктdocument,якийпредставляєвесьдокумент,формально,такожєвузломDOM. 




Існує12типіввузлів.Напрактицімизазвичайпрацюємоз4-мазних: 
document–“пунктвходу”вDOM. 
вузли-елементи–HTML-теги,будівельніблокидерев. 
текстовівузли–містятьтекст. 
коментарі–інодімиможемозаписатитудиінформацію,вонанебудепоказана, 


алеJSможечитатиїїзDOM. 
КолимипрацюємозDOM,митакожможемозастосуватидоньогоJavaScript. 
Наприклад,отримайтивузолізапуститиякийськод,щобзмінитийоготак,щоб 
побачитирезультат. 




НавігаціяпоDOM 


DOMдозволяєнамробитибудь-щозелементамитаїхвмістом,алеспочаткунам 
потрібнознайтивідповіднийDOMоб’єкт. 

УсіопераціїзDOMпочинаютьсязоб’єктаdocument.Цеголовна“точкавходу”в 
DOM.Зньогомиможемоотриматидоступдобудь-якоговузла. 

Осьзображенняструктурипосилань,якідозволяютьпереміщатисяміжвузлами 


DOM: 




Зверху:documentElementіbody 
Найвищівузлидеревадоступнібезпосередньояквластивостіdocument: 


<html>=document.documentElement 
Найвищийвузолдокумента–document.documentElement.ЦевузолDOMтегу 
<html>. 
<body>=document.body 
ДлядоступудоDOMвузлу<body>частовикористовуютьелемент– 
document.body. 
<head>=document.head 
Тег<head>доступнийякdocument.head. 


Дочірніелементи:childNodes,firstChild,lastChild 
Відтепермибудемовикористовуватидватерміни: 
Дочірнівузли(абодіти)–елементи,якієбезпосереднімидітьми.Іншими 
словами,вонивкладенісамевцейвузол.Наприклад,<head>і<body>є 
дочірнімиелементами<html>. 


Нащадки–всіелементи,яківкладенівданий,включаючидітей,їхніхдітей 
тощо. 

ВузлиHTML-деревамаютьієрархічневідношенняодиндоодного.Терміни 
ancestor(предок),descendant(нащадок),parent(батько),child(дитина)іsibling 
(сусід)використовуютьсядляописувідносин. 

Удеревівузлівверхнійвузолназиваєтьсякореневим(rootnode). 
Коженвузол,окрімrootnode,маєлишеодногозбатьків. 
Увузламожебутискількизавгоднодітей. 
Сусіди-цевузлиізспільнимбатьком. 
Дочірніелементи(діти)–елементи,якілежатьбезпосередньовсерединіцього. 
Нащадки–всіелементи,якілежатьусерединіцього,разомізїхнімидітьми,дітьми 


їхніхдітейтощо.Тобтовсепіддерево. 




Виможетевикористовуватитаківластивостідлянавігаціїміжвузлами. 
elem.parentNode-виберебатькаelem. 
elem.childNodes-псевдомасивзберігаєвсідочірніелементи,включаючитекстові. 
elem.children-псевдо-масивзберігаєлишедочірнівузли-елементи,тобто 
відповіднітегам. 
elem.firstChild–виберепершийдочірнійелементусерединіelem,включаючи 
текстовівузли. 
elem.firstElementChild–виберепершийдочірнійвузол-елементусерединіelem. 
elem.lastChild–вибереостаннійдочірнійелементусерединіelem,включаючи 
текстовівузли. 
elem.lastElementChild-вибереостаннійдочірнійвузол-елементусерединіelem. 
elem.previousSibling-вибереелемент"зліва"відelem(йогопопередньогосусіда) 
elem.previousElementSibling-виберевузол-елемент"зліва"відelem(його 
попередньогосусіда) 
elem.nextSibling-вибереелемент"праворуч"відelem(йогонаступногосусіда) 
elem.nextElementSibling-виберевузол-елемент"праворуч"відelem(його 
попередньогосусіда) 




МетодиівластивостідляроботизDOM 


JavaScriptдозволяєнаетапіформатуваннядокументудодаватидоньогоданіза 
допомогоюметодівdocument.write()іdocument.writeln(). 


Методидляотриманняелементу(ів)здокументу: 
document.getElementById()-повертаєелементзавказанимid. 
document.getElementsByName()-повертаєсписокелементівзвказанимname. 
document.getElementsByTagName-повертаєсписокелементівзавказаною 
назвоютегу. 
document.getElementsByClassName()-повертаєсписокелементівзавказаним 
ім'ямкласу. 
document.querySelector()-повертаєпершийелементвдокументіякийспівпадає 
звказанимCSSселектором. 
document.querySelectorAll()-повертаєсписоквсіхелементіввдокументі,які 
відповідаютьзазначенимCSSселекторам. 




Пошук:getElement*,querySelector* 
ВластивостінавігаціїпоDOMчудові,колиелементирозташованіблизькоодиндо 
одного.Аякщоні?Якотриматидовільнийелементсторінки? 


Дляцьогоіснуютьдодатковіметодипошуку. 


document.getElementByIdабопростоid 
Якщоелементмаєатрибутid,миможемоотриматийогозадопомогоюметоду 
document.getElementById(id),незалежновідтого,девінзнаходиться. 


<divid="elem"> 
<divid="elem-content">Елемент</div> 
</div> 
<script> 
//отриматиелементletelem=document.getElementById('elem'); 
//зробитийогофончервонимelem.style.background='red'; 
</script> 




querySelectorAll 


Досьогоднінайуніверсальнішийметод–цеelem.querySelectorAll(css),вінповертаєвсі 
елементивсерединіelem,щовідповідаютьзаданомуCSS-селектору. 
Тутмишукаємовсіелементи<li>,якієостаннімидочірніми: 
<ul> 


<li>Цей</li> 


<li>тест</li> 
</ul> 
<ul> 


<li>повністю</li> 


<li>пройдено</li> 
</ul> 
<script> 


letelements=document.querySelectorAll('ul>li:last-child');
for(letelemofelements){
alert(elem.innerHTML);//"тест","пройдено"
} 
</script> 



querySelector 
Викликelem.querySelector(css)повертаєпершийелемент,щовідповідаєданому 
CSS-селектору. 

Іншимисловами,результаттакийсамий,якіelem.querySelectorAll(css)[0],але 
останнійшукаєвсіелементитавибираєодин,аelem.querySelectorпростошукає 
один.Томуйогописатишвидшеікоротше. 

Такожможнавикористовуватипсевдокласи 
ПсевдокласивCSS-селекторі,такіяк:hoverі:active,такожпідтримуються. 
Наприклад,document.querySelectorAll(':hover')повернеколекціюелементів,що 
знаходятьсяпідкурсороммиші(упорядкувкладення:відкрайнього<html>до 
найбільшвкладеного). 



getElementsBy* 
Існуютьтакожіншіметодипошукуелементівзатегом,класомтощо. 


Сьогоднівониздебільшогоісторичні,оскількиquerySelectorєпотужнішимі 
коротшимдлянаписання. 


Томутутмирозглянемоїхпереважнодляповноти,тодіяквивсещеможете 
знайтиїхустаромукоді. 


elem.getElementsByTagName(tag)шукаєелементиззаданимтегоміповертаєїх 
колекцію.Параметрtagтакожможебутизірочкою"*"для“будь-якихтегів”. 
elem.getElementsByClassName(className)повертаєелементи,якімаютьзаданий 
CSS-клас. 
document.getElementsByName(name)повертаєелементиззаданиматрибутом 
nameдлявсьогодокумента.Використовуєтьсядужерідко. 




Властивості 


ПідчаспобудовиDOM-деревабагатостандартнихHTML-атрибутівстають 
властивостямивузлів.Подивимосянакількавластивостей,щочасто 
використовуються. 

hidden–контролюєвидимістьелемента. 
value-міститьпоточнийтекстовийконтентелементівinput,select,textarea. 
checked-зберігаєстанчекбоксучирадіокнопки. 
name-зберігаєзначення,вказаневHTML-атрибутіname. 
src–шляхдозображеннятега<img>. 




Створенняелементу 
ЄдваспособистворенняDOMвузлів: 
document.createElement(tag) 
Створюєновийелементззаданимтегом: 
letdiv=document.createElement('div'); 


document.createTextNode(text) 
Створюєновийтекстовийвузолззаданимтекстом: 
lettextNode=document.createTextNode('Отія'); 


Убільшостівипадківнампотрібностворюватисамеелементи,такіякdivдля 
повідомлень. 



Створенняповідомлень 

Створенняdivелементудляповідомленняскладаєтьсязтрьохкроків: 

//1.Створітьелемент<div> 
letdiv=document.createElement('div'); 


//2.Задайтейомуклас"alert" 
div.className="alert"; 


//3.Наповніть<div>змістом 
div.innerHTML="<strong>Всімпривіт!</strong>Випрочиталиважливе 
повідомлення."; 
Мистворилиелемент,алепокищовінзнаходитьсялишеузміннійпідназвоюdiv, 
аненасторінці.Томуминеможемойогопобачити. 




Методивставки 
Щобdivпоказавсянампотрібновставитийогодесьнасторінцівdocument. 
Наприклад,велемент<body>якийможнаотриматизвернувшисьдо 
document.body. 


Дляцьогоіснуєспеціальнийметодappend:document.body.append(div). 


Нижченаведенобільшеметодівдлявставки,вонивказуютькудисамебуде 
вставленовміст: 
node.append(...вузлиаборядки)–додаєвузлиаборядкивкінецьnode, 


node.prepend(...вузлиаборядки)–вставляєвузливборядкинапочаткуnode, 
node.before(...вузлиаборядки)–вставляєвузлиаборядкипопередуnode, 
node.after(...вузлиаборядки)–вставляєвузлиаборядкипісляnode, 
node.replaceWith(...вузлиаборядки)–замінюєnodeзаданимивузламиабо 
рядками. 

Алещо,якнампотрібновставитирядокHTML«якhtml»,зусіматегамитаіншим, 


втойсамийспосібякцеробитьelem.innerHTML? 
Дляцьогомиможемовикористовуватиінший,доситьуніверсальнийметод: 
elem.insertAdjacentHTML(куди,html). 


Першийпараметрцекодовеслово,якевказуєкудивставлятивідносноelem. 
Йогозначенннямаєбутиоднимзнаступних: 
"beforebegin"–вставитиhtmlбезпосередньопередelem, 
"afterbegin"–вставитиhtmlвelem,напочатку, 
"beforeend"–вставитиhtmlвelem,вкінці, 
"afterend"–вставитиhtmlбезпосередньопісляelem. 




Об'єктміститьметодидляроботизкласамиелемента. 
elem.classList.contains(cls)-повертаєtrueабоfalse,залежновідтого,чиєелемент 
класуcls 
elem.classList.add(cls)-додаєкласclsдоспискукласівелемента 
elem.classList.remove(cls)-видаляєкласclsзіспискукласівелемента 
elem.classList.replace(oldClass,newClass)-замінюєіснуючийкласнавказаний 
elem.classList.toggle(cls)-якщокласуclsнемає,додаєйого,якщоє,видаляє 

DOM-елементамвідповідаютьHTML-теги,якімаютьтекстовіатрибути.Доступдо 
атрибутівздійснюєтьсязадопомогоюстандартнихметодів.Ціметодипрацюють 
іззначенням,щознаходитьсявHTML. 
elem.hasAttribute(name)-перевіряєнаявністьаттрибута,повертаєtrueчиfalse 
elem.getAttribute(name)-отримуєзначенняатрибутутаповертаєйого 
elem.setAttribute(name,value)-встановлюєатрибут 
elem.removeAttribute(name)-видаляєатрибут 
elem.attributes-властивість,щоповертаєколекціювсіхатрибутівелемента 



Додатковіматеріали 



http://xn--80adth0aefm3i.xn--j1amh/DOMр 
https://uk.javascript.info/browser-environment 
https://uk.javascript.info/dom-nodes 
https://uk.javascript.info/dom-navigation 
https://uk.javascript.info/basic-dom-node-properties 
https://uk.javascript.info/searching-elements-dom 
https://uk.javascript.info/dom-attributes-and-properties 
https://uk.javascript.info/modifying-document 
https://uk.javascript.info/styles-and-classes 
https://uk.javascript.info/size-and-scroll 
https://uk.javascript.info/size-and-scroll-window 
https://uk.javashttps://www.sitepoint.com/how-why-use-html5-custom-dataattributes/
cript.info/coordinates 
https://www.youtube.com/watch?v=dndeRnzkJDU 
https://medium.com/swlh/what-the-heck-is-repaint-and-reflow-in-the-browserb2d0fb980c08 
https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ 

Домашнєзавдання 


-----1----


Напишітькод,щобвибратиелементзатрибутомdata-widget-nameздокумента 


тапрочитатийогозначення. 

<!DOCTYPEhtml> 

<html> 

<body> 

<divdata-widget-name="menu">Виберітьжанр</div> 

<script>/*вашкод*/</script> 

</body> 

</html> 



